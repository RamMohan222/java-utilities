<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                              http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <!-- Maven limitation : we have to inline this version and cannot use a
            property there -->
        <version>2.2.13.RELEASE</version>
    </parent>

    <groupId>com.demo.app</groupId>
    <artifactId>app-maven-config</artifactId>
    <version>${revision}</version>

    <packaging>pom</packaging>
    <name>Maven configuration for all app modules</name>

    <properties>
        <java.version>11</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- SonarQube properties -->
        <!--suppress UnresolvedMavenProperty -->
        <sonar.coverage.jacoco.xmlReportPaths>${maven.multiModuleProjectDirectory}/target/jacoco-aggregate/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
        <sonar.exclusions>.flattened-pom.xml</sonar.exclusions>

        <!-- Versions for plugins and 3rd party tools -->
        <flatten-maven-plugin.version>1.2.7</flatten-maven-plugin.version>
        <frontend-maven-plugin.version>1.9.1</frontend-maven-plugin.version>
        <git-commit-id-plugin.version>4.0.0</git-commit-id-plugin.version>
        <groovy-maven-plugin.version>2.1.1</groovy-maven-plugin.version>
        <jacoco-maven-plugin.version>0.8.5</jacoco-maven-plugin.version>
        <node.version>v12.13.0</node.version>
        <yarn.version>v1.22.4</yarn.version>
        <openapi-generator-version>5.3.0</openapi-generator-version>
    </properties>

    <!-- Some Maven config : plugins, distributionManagement, repositories,
        ... -->
    <build>
        <!-- Turn on filtering by default for application properties -->
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/application*.yml</include>
                    <include>**/application*.yaml</include>
                    <include>**/application*.properties</include>
                    <include>**/bootstrap*.yml</include>
                </includes>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <excludes>
                    <exclude>**/application*.yml</exclude>
                    <exclude>**/application*.yaml</exclude>
                    <exclude>**/application*.properties</exclude>
                    <exclude>**/bootstrap*.yml</exclude>
                </excludes>
            </resource>
        </resources>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <forceJavacCompilerUse>true</forceJavacCompilerUse>
                    </configuration>
                </plugin>
                <!-- This plugin replaces the ${revision} placeholder in published poms,
                    to avoid some issues -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                    <version>${flatten-maven-plugin.version}</version>
                    <configuration>
                        <updatePomFile>true</updatePomFile>
                        <flattenMode>resolveCiFriendliesOnly</flattenMode>
                        <outputDirectory>${project.build.directory}</outputDirectory>
                    </configuration>
                    <executions>
                        <execution>
                            <id>flatten</id>
                            <goals>
                                <goal>flatten</goal>
                            </goals>
                            <phase>process-resources</phase>
                        </execution>
                        <execution>
                            <id>flatten.clean</id>
                            <goals>
                                <goal>clean</goal>
                            </goals>
                            <phase>clean</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <version>${git-commit-id-plugin.version}</version>
                    <configuration>
                        <useNativeGit>true</useNativeGit>
                        <generateGitPropertiesFile>true</generateGitPropertiesFile>
                        <generateGitPropertiesFilename>${project.build.outputDirectory}/${project.groupId}.${project.artifactId}-git.properties</generateGitPropertiesFilename>
                        <includeOnlyProperties>
                            <includeOnlyProperty>^git.build.(time|number)$</includeOnlyProperty>
                            <includeOnlyProperty>^git.commit.id.(abbrev|full)$</includeOnlyProperty>
                            <includeOnlyProperty>^git.branch$</includeOnlyProperty>
                            <includeOnlyProperty>^git.dirty</includeOnlyProperty>
                        </includeOnlyProperties>
                        <commitIdGenerationMode>full</commitIdGenerationMode>
                        <offline>true</offline>
                        <injectAllReactorProjects>true</injectAllReactorProjects>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>groovy-maven-plugin</artifactId>
                    <version>${groovy-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>generate-resources</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <source>
                                <![CDATA[
                                    println("==== Creating VERSION file ====");
                                    File versionFile = new File(properties['destination'])
                                    versionFile.parentFile.mkdirs()
                                    BufferedWriter writer = new BufferedWriter(new FileWriter(versionFile));

                                    writer.println("app.version=${revision}");

                                    def dynamicProperties = [
                                            "module.version"      : "project.version",
                                            "git.branch"          : "git.branch",
                                            "git.build.time"      : "git.build.time",
                                            "git.commit.id.abbrev": "git.commit.id.abbrev",
                                            "git.commit.id.full"  : "git.commit.id.full",
                                            "git.dirty"           : "git.dirty"
                                    ]

                                    if (properties['isModule'] != "true"){
                                        // When the current execution is not a module, remove the "module.version" key
                                        dynamicProperties.remove(0);
                                    }

                                    dynamicProperties.each { k, v ->
                                        // dirty hack to avoid having "${" and "}" replaced by flatten plugin
                                        writer.println(k + '=$' + '{' + v + "\u007d");
                                    }

                                    String buildTag = "Not a CI build";
                                    try {
                                        buildTag = System.getenv()["BUILD_TAG"]
                                    } catch (Exception e) {
                                        println("============= Could not find BUILD_TAG probably this is not a Jenkins build ===========");
                                    }
                                    writer.println("build.tag=" + buildTag);

                                    writer.close();
                                ]]>
                                </source>
                                <properties>
                                    <isModule>true</isModule>
                                    <destination>${project.build.directory}/deployment/VERSION</destination>
                                </properties>
                            </configuration>
                        </execution>
                    </executions>
                    <dependencies>
                        <dependency>
                            <groupId>org.codehaus.groovy</groupId>
                            <artifactId>groovy-all</artifactId>
                            <version>3.0.0</version>
                            <type>pom</type>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <configuration>
                        <archive>
                            <manifestEntries>
                                <App-Version>${revision}</App-Version>
                            </manifestEntries>
                        </archive>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <executions>
                        <!-- By default, do not execute the maven assembly plugin -->
                        <execution>
                            <phase>none</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>report</id>
                            <goals>
                                <goal>report-aggregate</goal>
                            </goals>
                            <phase>test</phase>
                            <configuration>
                                <outputDirectory>${maven.multiModuleProjectDirectory}/target/jacoco-aggregate</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.openapitools</groupId>
                    <artifactId>openapi-generator-maven-plugin</artifactId>
                    <version>${openapi-generator-version}</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!-- Add the flatten plugin as default for all modules of this hierarchy -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
            </plugin>
            <!-- Add the git commit ID plugin as default for all modules of this hierarchy -->
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- This profile disables unneeded plugins when tests are not executed -->
        <profile>
            <id>noTests</id>
            <activation>
                <property>
                    <name>skipTests</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- Disable jacoco when not executing tests -->
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>prepare-agent</id>
                                <phase>none</phase>
                            </execution>
                            <execution>
                                <id>report</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- This profile is automatically enabled on UI modules -->
        <profile>
            <id>app-ui-module</id>
            <activation>
                <file>
                    <exists>package.json</exists>
                </file>
            </activation>

            <properties>
				<!--
                <sonar.sources>src,public</sonar.sources>
                <sonar.tests>src</sonar.tests>
                <sonar.test.inclusions>src/**/__tests__/**/*,src/**/_tests_/**/*,src/**/*.spec.js,src/**/*.spec.jsx,src/**/*.test.js,src/**/*.test.jsx</sonar.test.inclusions>
                <sonar.javascript.lcov.reportPaths>target/coverage/lcov.info</sonar.javascript.lcov.reportPaths>
				-->
				<sonar.coverage.exclusions>src/**/*.js,src/**/*.jsx,src/**/__tests__/**/*,src/**/_tests_/**/*,src/**/*.spec.js,src/**/*.spec.jsx,src/**/*.test.js,src/**/*.test.jsx</sonar.coverage.exclusions>				
            </properties>

            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <artifactId>maven-clean-plugin</artifactId>
                            <configuration>
                                <!-- Clean any built directory from frontend if we have some -->
                                <filesets>
                                    <fileset>
                                        <directory>.</directory>
                                        <includes>
                                            <include>build/**</include>
                                        </includes>
                                        <followSymlinks>false</followSymlinks>
                                    </fileset>
                                </filesets>
                            </configuration>
                        </plugin>
                        <!-- Disable jacoco on UI modules -->
                        <plugin>
                            <groupId>org.jacoco</groupId>
                            <artifactId>jacoco-maven-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>prepare-agent</id>
                                    <phase>none</phase>
                                </execution>
                                <execution>
                                    <id>report</id>
                                    <phase>none</phase>
                                </execution>
                            </executions>
                        </plugin>
                        <!-- Plugin to build the frontend using Node.js and NPM -->
                        <plugin>
                            <groupId>com.github.eirslett</groupId>
                            <artifactId>frontend-maven-plugin</artifactId>
                            <version>${frontend-maven-plugin.version}</version>
                            <configuration>
                                <nodeVersion>${node.version}</nodeVersion>
                                <yarnVersion>${yarn.version}</yarnVersion>
                                <installDirectory>${maven.multiModuleProjectDirectory}/.tmp</installDirectory>
                            </configuration>
                            <executions>
                                <execution>
                                    <id>Install Node and Yarn</id>
                                    <goals>
                                        <goal>install-node-and-yarn</goal>
                                    </goals>
                                    <phase>generate-resources</phase>
                                </execution>
                                <execution>
                                    <id>Yarn install</id>
                                    <goals>
                                        <goal>yarn</goal>
                                    </goals>
                                    <phase>generate-resources</phase>
                                    <configuration>
                                        <arguments>install --mutex network</arguments>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>Frontend production build</id>
                                    <goals>
                                        <goal>yarn</goal>
                                    </goals>
                                    <phase>compile</phase>
                                    <configuration>
                                        <arguments>run build</arguments>
                                    </configuration>
                                </execution>
								<!-- TODO review front end tests, coverage and time taken during CI
                                <execution>
                                    <id>Frontend tests</id>
                                    <goals>
                                        <goal>yarn</goal>
                                    </goals>
                                    <phase>test</phase>
                                    <configuration>
                                    </configuration>
                                </execution>
								-->
                            </executions>
                        </plugin>
                        <plugin>
                            <artifactId>maven-resources-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>copy-resources</id>
                                    <phase>process-classes</phase>
                                    <goals>
                                        <goal>copy-resources</goal>
                                    </goals>
                                    <configuration>
                                        <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                                        <resources>
                                            <resource>
                                                <directory>${basedir}/build</directory>
                                                <filtering>false</filtering>
                                                <targetPath>static</targetPath>
                                            </resource>
                                        </resources>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>

                <plugins>
                    <!-- Build the UI -->
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- Profile to disable UI build -->
            <id>no-ui</id>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>com.github.eirslett</groupId>
                            <artifactId>frontend-maven-plugin</artifactId>
                            <configuration>
                                <skip>true</skip>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
        <!-- Profile for distribution -->
        <profile>
            <id>distribution</id>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-assembly-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>distribution</id>
                                    <phase>package</phase>
                                    <goals>
                                        <goal>single</goal>
                                    </goals>
                                    <configuration>
                                        <descriptors>
                                            <descriptor>src/assembly/zip.xml</descriptor>
                                        </descriptors>
                                        <ignoreMissingDescriptor>true</ignoreMissingDescriptor>
                                        <appendAssemblyId>true</appendAssemblyId>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>

                <plugins>
                    <plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- This profile is for development environment and default development profile is ACTIVE -->
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
            </properties>
            <repositories>
                <repository>
                    <id>central</id>
                    <name>ip-172-31-3-145.ap-south-1.compute.internal-releases</name>
                    <url>http://35.154.91.240:8081/artifactory/libs-release-local</url>
                    <snapshots>
                        <enabled>true</enabled>
                        <updatePolicy>always</updatePolicy>
                    </snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>central</id>
                    <name>ip-172-31-3-145.ap-south-1.compute.internal-releases</name>
                    <url>http://35.154.91.240:8081/artifactory/libs-release-local</url>
                    <snapshots>
                        <enabled>true</enabled>
                        <updatePolicy>always</updatePolicy>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>
        <!-- This profile is for production environment -->
        <!-- Careful ! It's not enough to activate the "prod" profile, one has to explicitly deactivate the "dev" one using "-P !dev" command-line argument -->
        <profile>
            <id>prod</id>
            <properties>
                <spring.profiles.active>prod</spring.profiles.active>
            </properties>
        </profile>
    </profiles>

    <!-- Disable Maven Central repo  -->
    <repositories>
        <repository>
            <id>central</id>
            <url>http://repo1.maven.org/maven2</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

</project>
